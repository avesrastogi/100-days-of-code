//DAY 67/100
/*
I DID NOT CODE IT!!

Simplify Directory Path
Asked in:  
Microsoft
Given a string A representing an absolute path for a file (Unix-style).

Return the string A after simplifying the absolute path.

Note:

Absolute path always begin with ’/’ ( root directory ).

Path will not have whitespace characters.



Input Format

The only argument given is string A.
Output Format

Return a string denoting the simplified absolue path for a file (Unix-style).
For Example

Input 1:
    A = "/home/"
Output 1:
    "/home"

Input 2:
    A = "/a/./b/../../c/"
Output 2:
    "/c"

*/


/*
WORKING: Just like we do it in Linux…any /a implies you are entering into that directory
and /… implies you are leaving that directory
so whenever you encounter a /
Run a Loop until you encounter next /
while running this loop keep adding all the elements you get
so for example take, /a/b/…/…/c
you have entered into directories a and b and on /… you pop out b and /… you pop out a
and rest you have /c which is your answer
look out for cases where /. and // is involved…in these cases ignore the /. and /

*/




string Solution::simplifyPath(string A) {
    stack<string> s;
    int i=0;
    while(i<A.size())                       //to loop till string termination
    {
        string c="";
        c+='/';
        int j=i+1;
        while(j<A.size())                   //to loop till j=i+1
        {
            if(j==A.size()-1)               //for last index of the string
            {
                if(A[j]!='/') {             //if last index element is not '/'
                    c+=A[j];                //add the last index element to the string that already has elements from the last '/'
                break;
            }
            if(A[j]=='/' && A[j+1]=='/')        //case of '//' 
            j+=1;                               //increment index to the next '/'
            if(A[j]=='/' && A[j+1]!='/')break;      //check for '///'
            c+=A[j++];                              //shorthand for add A[j] to the string followed by a j++
        }
        i=j;                                    //initialize i with j, as an incremental part
        if(c=="/")break;                        //if string has '/, /.'
        if(c=="/.")continue;
        if(c=="/..")                            //'/..' denotes end of string
        {
            if(!s.empty())                      //if stack isn't empty pop the top element
            {
                s.pop();
                continue;
            }
        }
        else
        {
            s.push(c);                          //else push the string c
        }
    }
    vector<string>ans;
    while(!s.empty())
    {
        ans.push_back(s.top());                 //push in ans and pop from s
        s.pop();
    }
    reverse(ans.begin(),ans.end());             //reverse due to reversal push from s to ans
    string ANS="";
    for(int i=0;i<ans.size();++i)               //put ans stack in a ANS string
        ANS+=ans[i];
    if(ANS.empty())ANS+="/";                    //in case of nothing as the answer directory
    return ANS;
}
