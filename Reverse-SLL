//DAY 58/100
/*
Reverse a linked list. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL,

return 5->4->3->2->1->NULL.
*/



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

/*
OPTIMISED: 
       if(head==NULL) {
            return false;
        }

        // find middle
        ListNode* fast = head;
        ListNode* slow = head;

        while(fast!=NULL && fast->next!=NULL) {
            slow = slow->next;            
            fast = fast->next->next;
        }
        
        ListNode* p = slow;
        ListNode* q = NULL;
        ListNode* r;

        // reverse second half of list
        while(p) {
            r = q;
            q = p;
            p = p->next;
            q->next = r;
        }
        slow = q;

        // compare 
        while(head!=NULL && slow!=NULL) {
            if(head->val != slow->val) 
                return false;
            head=head->next;
            slow=slow->next;
        }

        return true;
*/

ListNode* Solution::reverseList(ListNode* A) {
    ListNode *p=A;
    ListNode *q=NULL;
    ListNode *r;
    
    while(p) {                  
        r=q;                    //r will hold the value of q;
        q=p;                    //q will store the new value of p
        p=p->next;              //p will iterate 
        q->next=r;              //next of q will become previous q;
    }
    A=q;
    return A;
}
