//DAY 9/100
/* Give a N*N square matrix, return an array of its anti-diagonals. Look at the example for more details.

Example:

		
Input: 	

1 2 3
4 5 6
7 8 9

Return the following :

[ 
  [1],
  [2, 4],
  [3, 5, 7],
  [6, 8],
  [9]
]


Input : 
1 2
3 4

Return the following  : 

[
  [1],
  [2, 3],
  [4]
]
*/

//WORKING: find the logic behind the maximum limit fot the number of rows in the result vector i.e 2*(n-1)
           //then use the ideal row number of the given array with the maximum limit of result vector under the limitation of continue statement
           
           


vector<vector<int> > Solution::diagonal(vector<vector<int> > &A) {

    vector<vector<int>> result;
    vector<int> diagonal;
    
    int n = A.size();
    if(n == 0)
        return result;
    for(int d = 0; d <= 2*(n-1); d++) {
       for(int i = 0; i <= d; i++) {         
           int j = d - i;                     //iterator to check for case of n=4, when d=6 and i=0, if won't throw continue, thus we need to use (d-i) as another debug statement 
           //continue if i or j exceeds their bounds
           if(i >= n || j >= n)
                continue;
           diagonal.push_back(A[i][j]);
       }
       result.push_back(diagonal);               //inserts ith anti-diagonal
       diagonal.clear();
   }
   return result;
}

















