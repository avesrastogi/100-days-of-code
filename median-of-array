//DAY 43/100
/*
There are two sorted arrays A and B of size m and n respectively.

Find the median of the two sorted arrays ( The median of the array formed by merging both the arrays ).

The overall run time complexity should be O(log (m+n)).

Sample Input

A : [1 4 5]
B : [2 3]

Sample Output

3
 NOTE: IF the number of elements in the merged array is even, then the median is the average of n / 2 th and n/2 + 1th element.
For example, if the array is [1 2 3 4], the median is (2 + 3) / 2.0 = 2.5 
*/


double Solution::findMedianSortedArrays(const vector<int> &A, const vector<int> &B) {
  int m=A.size(), n=B.size;
  if(m>n) {
    return findMedianSortedArrays(B, A);
  }
  
  int low=0, high=m;
  while(low<=high) {
    int partitionM=low+(high-low)/2;
    int partitionN=(m+n+1)/2 - partitionM;
    
    int minM=(partitionM==0)?INT_MIN: A[partitionM-1];
    int maxM=(partitionM==m)?INT_MAX: A[partitionM];
    
    int minN=(partitionN==0)?INT_MIN: A[partitionN-1];
    int maxN=(partitionN==m)?INT_MAX: A[partitionN];
    
    if(minM<=maxN && minN<=maxM) {
      if((m+n)%2==0) {
        return (double)((max(minM, minN)+min(maxM, maxN))/2);
      }
      
      else {
        return (double)(max(minM, minN));
      }
    }
    else if(maxN<minM){
       high=partitionM-1;
    }
    else {
      low=partitionM+1;
    }
  }
  
  return -1;
  
}
