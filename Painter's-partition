//DAY 40/100
/*
Given 2 integers A and B and an array of integars C of size N.

Element C[i] represents length of ith board.

You have to paint all N boards [C0, C1, C2, C3 â€¦ CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of board.

Calculate and return minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of board.

2 painters cannot share a board to paint. That is to say, a board
cannot be painted partially by one painter, and partially by another.
A painter will only paint contiguous boards. Which means a
configuration where painter 1 paints board 1 and 3 but not 2 is
invalid.
Return the ans % 10000003



Input Format

The first argument given is the integer A.
The second argument given is the integer B.
The third argument given is the integer array C.
Output Format

Return minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of board % 10000003.
Constraints

1 <=A <= 1000
1 <= B <= 10^6
1 <= C.size() <= 10^5
1 <= C[i] <= 10^6
For Example

Input 1:
    A = 2
    B = 5
    C = [1, 10]
Output 1:
    50
Explanation 1:
    Possibility 1:- same painter paints both blocks, time taken = 55units
    Possibility 2:- Painter 1 paints block 1, painter 2 paints block 2, time take = max(5, 50) = 50
    There are no other distinct ways to paint boards.
    ans = 50%10000003

Input 2:
    A = 10
    B = 1
    C = [1, 8, 11, 3]
Output 2:
    11
*/

int check(long long int mid,vector<int> C) // Returns no. of workers required to do the job in "mid" time.
{
    int count=1;
    long long int sum=0;
    for(int i=0;i<C.size();i++)
    {
        if(sum+C[i]>mid)  
        {
            sum=C[i];
            count++;
            if(C[i]>mid)  // If the dimension of a board is more than mid then it is impossible for a worker to complete the job in mid time so we will return INT_MAX;
            {
                return INT_MAX;
            }
        }
        else
        {
            sum+=C[i];
        }
    }
    return count;  // return no. of workers needed.
}
int Solution::paint(int A, int B, vector<int> &C) {
    long long int low=LONG_MAX;   // If a painter paints the smallest board then it will take the least time.
    long long int high=0;  // If a single painter paints all the board then it will take the highest time.
    for(int i=0;i<C.size();i++)
    {
        low=min(low,(long long)C[i]);  
        high+=C[i]; 
    }
    long long int ans;
    long long int mid;
    while(low<=high)    /* Binary Search */ 
    {
        mid=low+(high-low)/2;
        if(check(mid,C)<=A)  // If "mid" is the amount of time we have then check() function will return number of workers we need to complete the job in "mid" time.
        {
            ans=mid; 
            high=mid-1;  // We will check if we can do the job in time less than "mid".
        }
        else
        {
            low=mid+1; // if it is not possible to do the job in given time. We will increase our range.
        }
    }
    return (ans*B)%10000003;
}
