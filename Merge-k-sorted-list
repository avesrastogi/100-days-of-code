//DAY 100/100
/*
Merge K Sorted Lists
Asked in:  
Flipkart
Amazon
Google
Merge k sorted linked lists and return it as one sorted list.

Example :

1 -> 10 -> 20
4 -> 11 -> 13
3 -> 8 -> 9
will result in

1 -> 3 -> 4 -> 8 -> 9 -> 10 -> 11 -> 13 -> 20
*/










/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 


ListNode* Solution::mergeKLists(vector<ListNode*> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    
    
    
    
    
    
    //implement minheap using priority queue
    priority_queue<int, vector<int>, greater<int>> minheap;
    for(auto i:A) {
        //i means A[i] in auto case
        while(i!=NULL) {        //A[0]!=NULL or head!=NULL
            //A[0] denotes the first node of list[0], store all elements of A[0] list in minheap
            minheap.push(i->val);       //push elements in any order, .top( will give the minimum element)
            i=i->next;
        }
    }
    ListNode *temp = new ListNode(0);
    ListNode *head=temp;
    while(!minheap.empty()) {
        //temp will store the minimum element from the minheap
        temp->next = new ListNode(minheap.top());
        minheap.pop();          //remove the minimum element from the minheap
        temp=temp->next;        //temp is now ready to store the next value
    }
    
    //temp is initially given a random location 1000 with value 0, head also has 1000, but temp->next holds the merged k list, so head->next is the address.
    return head->next;
}

