//DAY 100/100

/*
Flatten Binary Tree to Linked List
Asked in:  
Adobe
Amazon
Microsoft
Given a binary tree, flatten it to a linked list in-place.

Example :
Given


         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:

   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
Note that the left child of all nodes should be NULL.
*/





/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
TreeNode* Solution::flatten(TreeNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    stack<TreeNode*> res;
    //now res stak holds the root of the tree
    res.push(A);
    
    while(!res.empty()) {
        //node holds the top element of stack
        auto node = res.top();
        //and pop that element as well
        res.pop();
        //push r of tree
        if(node->right) {
            res.push(node->right);
        }
        
        //push l of tree
        if(node->left) {
            res.push(node->left);
        }
        
        if(res.size()) {
            node->right = res.top();
        }
        //in case of empty stack can't push anything
        else {
            node->right = NULL;
        }
        
        node->left = NULL;
    } 
    

    return A;
}
