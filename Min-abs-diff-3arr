//DAY 57/100
/*
Minimize the absolute difference
Asked in:  
Microsoft
Problem Setter: ganeshk2 Problem Tester: dhruvi
Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively.
i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:

1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.
*/




int Solution::solve(vector<int> &A, vector<int> &B, vector<int> &C) {
    int mini=INT_MAX, i=0, j=0, k=0, a=A.size(), b=B.size(), c=C.size();
    while(i<a && j<b && k<c) {
        int m=max(max(A[i], B[j]), C[k]);           //cascaded stl
        int n=min(min(A[i], B[j]), C[k]);
        mini=min(mini, abs(m-n));
        if(n==A[i]) {           //keep incrementing index of the minimum element to get the solution
            if(i<a) {
                i++;
            }
        }         
        if(n==B[j]) {
            if(j<b) {
                j++;
            }
        } 
        if(n==C[k]) {
            if(k<c) {
                k++;
            }
        } 
    }
    return mini;
}

