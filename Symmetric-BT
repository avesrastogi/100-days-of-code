//DAY 100/100
/*Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

Example :

    1
   / \
  2   2
 / \ / \
3  4 4  3
The above binary tree is symmetric.
But the following is not:

    1
   / \
  2   2
   \   \
   3    3
Return 0 / 1 ( 0 for false, 1 for true ) for this problem
*/



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
int recur(TreeNode* A, TreeNode* B) {
    if(A==NULL && B==NULL) {
        return 1;    
    }
    
    else if(A==NULL || B==NULL){
        return 0;
    }  
    
    //need to have left child as the right child for mirror image, same as mirror image question just use A and A in place of root A and root B
    return (A->val==B->val && recur(A->left, B->right) && recur(A->right, B->left));
} 

int Solution::isSymmetric(TreeNode* A) {
    return recur(A, A);
}



