//DAY 66/100
/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

 Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list. Note 2:
Usually the version often seen in the interviews is reversing the whole linked list which is obviously an easier version of this question. 
*/







/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reverseBetween(ListNode* A, int B, int C) {
    if(A==NULL || B==C || B>C) {
        return A;
    }
    
    ListNode *p=A, *prev=p, *head=p;
    int m=0;
    ListNode *q=NULL, *temp=NULL;

    if(B==1) {
        while(m<C) {
            m++;
            temp=q;
            q=p;
            p=p->next;
            q->next=temp;                    
        }
        
        A->next=p;
        
        return q;
    }
    
    else {
        while(m<B-1) {
            m++;
            prev=p;
            p=p->next;
        }
        
        ListNode *m_start=p;
        //cout<<m<<" "<<m_start->val;
        while(m!=C) {
            m++;
            temp=q;
            q=p;
            p=p->next;
            q->next=temp;
        }
        
        //cout<<m<<" "<<q->val;
        //cout<<p->val;
      
        m_start->next=p;
        prev->next=q;        
        
    
        return A;        
    }

}
