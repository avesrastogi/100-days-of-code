//DAY 95/100
/*
Generate all Parentheses II
Asked in:  
Facebook
Microsoft
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*n.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"
Make sure the returned list of strings are sorted
*/





void parentheses(vector<string> &res, string str, int l, int r) {
    
    //at every 0,0 push the string seq.
    if(l==0 && r==0) {
        res.push_back(str);
        return;
    }


//cases when left brackets are not zero
    if(l>0) {
        //add '('
        str+="(";
        l--;
        parentheses(res, str, l, r);        //call for 2,3; 1,3;
        
        //after 0,0 push in res, empty the string, fro 1,3 process 2,3(l+1, r)
        str.erase(str.begin()+str.size()-1);
        l++;
        str+=")";       //apply ending bracket
        r--;
        
        //keep up the process for 2,3 now as 2,3 will give 1,3; 0,3 or 2,2
        if(l<=r) {
            parentheses(res, str, l, r);
        }
    }
    

    //for 0,3 as l==0 and r>0, call for 0,3; 0,2; 0,1;
    else if(r>0 && l==0) {
        str+=")";
        r--;
        parentheses(res, str, l, r);
    }
}

vector<string> Solution::generateParenthesis(int A) {
    vector<string> res;
    if(A==0) {
        return res;
    }
    


    parentheses(res, "", A, A);
    
    return res;
}
