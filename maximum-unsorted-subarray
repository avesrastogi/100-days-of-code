//DAY 23/100
/*
You are given an array (zero indexed) of N non-negative integers, A0, A1 ,…, AN-1.
Find the minimum sub array Al, Al+1 ,…, Ar so if we sort(in ascending order) that sub array, then the whole array should get sorted.
If A is already sorted, output -1.

Example :

Input 1:

A = [1, 3, 2, 4, 5]

Return: [1, 2]

Input 2:

A = [1, 2, 3, 4, 5]

Return: [-1]
In the above example(Input 1), if we sort the subarray A1, A2, then whole array A should get sorted.


I/P: [4 15 4 4 15 18 20] 
O/P: [1 3]           //in case of equal elements return leftmost and rightmost
*/


vector<int> Solution::subUnsort(vector<int> &arr) {
    int startIndex = -1;
    int endIndex = -1;
    vector<int> output;
    for(int i=0;i<arr.size()-1;i++){
        if(arr[i] > arr[i+1] ){
            startIndex = i;                 //basic logic to find left of subarray (for duplicate elements it gives the index of rightmost element)
            break;                          //ex: [4 15 15 4 4 17 18 20] gives 2
        }
    }
    if(startIndex == -1){
        output.push_back(-1);
        return output;
    }
    for(int i=arr.size()-1;i>0;i--){
        if(arr[i-1] > arr[i]){          //basic logic to find right of subarray (for duplicate elements it gives the index of leftmost element)
            endIndex = i;               //ex: [4 15 15 4 4 17 18 20] gives 3
            break;
        }
    }
    int minEle = INT_MAX, maxEle = INT_MIN;
    for(int i=startIndex;i<=endIndex;i++){
        minEle = min(minEle, arr[i]);
        maxEle = max(maxEle, arr[i]);
    }
    int minIndex = startIndex;
    int maxIndex = endIndex;
    for(int i = startIndex -1 ;i>=0;i--){
        if(arr[i] > minEle){
            minIndex = i;
        }
    }
    for(int i= endIndex+1;i<arr.size();i++){
        if(arr[i] < maxEle){
            maxIndex = i;
        }
    }
    output.push_back(minIndex);
    output.push_back(maxIndex);
    return output;                            ////ex: [4 15 15 4 4 17 18 20] gives [1, 4]
}
