//DAY 95/100
/*
NQueens
Asked in:  
Qualcomm
Google
Amazon
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

N Queens: Example 1

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens’ placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

*/





bool check(vector<string> &temp, int row, int col, int A) {
    
    //check if there is queen in that row
    for(int i=0; i<row; i++) {
        if(temp[i][col]=='Q') {
            return false;
        }
    }
    
    //check if there is queen below left, i.e. the regular diagonal with i-1,j-1
    for(int i=row, j=col; i>=0 and j>=0; i--, j--) {
        if(temp[i][j]=='Q') {
            return false;
        }
    }
    
    //check if there is a queen in the below right i.e. the other diagonal with i-1, j+1
    for(int i=row, j=col; i>=0 and j<A; i--, j++) {
        if(temp[i][j]=='Q') {
            return false;
        }
    }
    
    return true;
}

void nqueens(vector<vector<string>> &res, vector<string> &temp, int A, int row) {
    //input temp when we've reached the last traversal of last row
    if(row==A) {
        res.push_back(temp);
        return;
    }
    
    for(int col=0; col<A; col++) {
        
        //if the position is without any attack from the same row, column, on either diagonals to the already settled queen
        //place the queen
        if(check(temp, row, col, A)) {
            temp[row][col]='Q';
            //check the nect row after placing one queen in a row, remember: one queen/row
            nqueens(res, temp, A, row+1);
            temp[row][col]='.';
        }
    }
    
    return;
}

vector<vector<string> > Solution::solveNQueens(int A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    vector<vector<string>> res;
    vector<string> temp;
    string str;
    
    //initialise the first row of temp as [....]
    for(int i=0; i<A; i++) {
        str.push_back('.');
    }
    
    for(int i=0; i<A; i++) {
        temp.push_back(str);
    }
    
    nqueens(res, temp, A, 0);
    
    return res;
}
