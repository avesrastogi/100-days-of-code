//DAY 21/100
/*
A hotel manager has to process N advance bookings of rooms for the next season. His hotel has K rooms. Bookings contain an arrival date and a departure date. He wants to find out whether there are enough rooms in the hotel to satisfy the demand. Write a program that solves this problem in time O(N log N) .

Input:


First list for arrival time of booking.
Second list for departure time of booking.
Third is K which denotes count of rooms.

Output:

A boolean which tells whether its possible to make a booking. 
Return 0/1 for C programs.
O -> No there are not enough rooms for N booking.
1 -> Yes there are enough rooms for N booking.
Example :

Input : 
        Arrivals :   [1 3 5]
        Departures : [2 6 8]
        K : 1

Return : False / 0 

At day = 5, there are 2 guests in the hotel. But I have only one room. 
*/

//WORKING: arrive should be less than depart. ex:-  Arrivals :   [10 3 5] Departures : [2 6 8] K : 1, here j  will iterate but count of occupied rooms will decrement,
//arrive of each should be less than depart of each ex:- Arrivals :   [1 3 5] Departures : [2 4 6] K : 1, so basic logic arrive[i] < depart[j]
//arrive of each should be less than depart. ex:- Arrivals :   [1 3 5] Departures : [2 6 8] K : 1, increment count of rooms occupied and i



bool Solution::hotel(vector<int> &arrive, vector<int> &depart, int K) {
  int i = 0, j = 0, c = 0;   //c is count of occupied rooms
  while(i < arrive.size() && j < depart.size()) {
    if(arrive[i] < depart[j]) {
      c++;
      i++;
    }
    else {
      c--;                          
      i++;
    }
    
    if(c > K) {                       //more than available rooms occupied
      return false;
    }
  }
  return true;
}
















