//DAY 89/100
/*

Given an array of strings, return all groups of strings that are anagrams. Represent a group by a list of integers representing the index in the original list. Look at the sample case for clarification.

 Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp' 
 Note: All inputs will be in lower-case. 
Example :

Input : cat dog god tca
Output : [[1, 4], [2, 3]]
cat and tca are anagrams which correspond to index 1 and 4.
dog and god are another set of anagrams which correspond to index 2 and 3.
The indices are 1 based ( the first element has index 1 instead of index 0).

 Ordering of the result : You should not change the relative ordering of the words / phrases within the group. Within a group containing A[i] and A[j], A[i] c
*/










vector<vector<int> > Solution::anagrams(const vector<string> &A) {
    vector<vector<int>> result;
    
    
    //create a hashmap with string and vector as value, example: act: 1, 3; dgo: 2, 4
    unordered_map <string, vector<int>> X; 
    


    for(int i=0; i<A.size(); i++) {
        
        
        string s = A[i];    
        //sort the string cat as act to match the anagram tca i.e. sorted: act 
        sort(s.begin(), s.end());
        
        //push the pair anagram in the vector if the key matches
        X[s].push_back(i+1);
        
        
        
        //cout<<"loop1";
        
        /*int count = 0, not_anagram = 0;
        temp.clear();
        for(int j=0; j<A[i].length(); j++) {
            not_anagram++;
            //cout<<"loop2";
            
            if(X.find(A[i][j]) != X.end()) {
                count++;
                if(count==A[i].length()) {
                    int x = X.at(A[i][j]);
                    temp.push_back(x+1);
                    temp.push_back(i+1);
                    result.push_back(temp);
                }
            }
            //cout<<A[i][j];
           X[A[i][j]] = i;
        }*/
    }
    
    for(auto i: X) {
        //the result is a double vector, so push the value of hashmap i.e X[i].second in a 2D vector
        result.push_back(i.second);
    }
    
    
    return result;
}
