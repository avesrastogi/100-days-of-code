//DAY 26/100 
/*
You are given a binary string(i.e. with characters 0 and 1) S consisting of characters S1, S2, …, SN. In a single operation, you can choose two indices L and R such that 1 ≤ L ≤ R ≤ N and flip the characters SL, SL+1, …, SR. By flipping, we mean change character 0 to 1 and vice-versa.

Your aim is to perform ATMOST one operation such that in final string number of 1s is maximised. If you don’t want to perform the operation, return an empty array. Else, return an array consisting of two elements denoting L and R. If there are multiple solutions, return the lexicographically smallest pair of L and R.

Notes:

Pair (a, b) is lexicographically smaller than pair (c, d) if a < c or, if a == c and b < d.
For example,

S = 010

Pair of [L, R] | Final string
_______________|_____________
[1 1]          | 110
[1 2]          | 100
[1 3]          | 101
[2 2]          | 000
[2 3]          | 001

We see that two pairs [1, 1] and [1, 3] give same number of 1s in final string. So, we return [1, 1].

*/






vector<int> Solution::flip(string A) {
    //https://www.youtube.com/watch?v=cLVpE5q_-DE&feature=youtu.be
    //we need to find a substring left and right pointers for which count of 0s is more than the count of 1s to flip the whole substring and attain max no. of 1s in the whole string  
    
    //KADANE's ALGO
    vector<int> ans;
    
    
    int left=0, right=0, maxSum=INT_MIN, ltemp=0, count=0;
    
    //check if the string contains all 1s
    for(int i=0; i<A.size(); i++) {
        if(A[i]=='0') {
            count++;
        }
    }
    
    if(count==0) {
        return ans;
    }
    
    count=0;
    for(int i=0; i<A.size(); i++){
    
        //count will increment for each zero
        if(A[i]=='0') {
            count++;    
        }  
        else {
            count--;
        }
        
        
        
        //case of substring with more number of zeroes
        if(count>maxSum){
            left = ltemp;
            right = i;
            maxSum=count;
        }
        
        //substring has more number of 1s hence can't flip, set the ltemp i.e temporary left pointer to next position
        if(count<0){
            //put count=0 for the new substring to be traversed
            count=0;
            ltemp=i+1;
        }
        
    }
    

    ans.push_back(left+1);
    ans.push_back(right+1);
    
    
    return ans;
}


















