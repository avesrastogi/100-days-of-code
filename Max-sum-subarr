//  DAY 2
vector<int> Solution::maxset(vector<int> &A) {
    int n = A.size();
    int i = -1, k = 0, sum = 0, fstart = 0, fend = -1, start = 0, maxl = 0, count =0, maxsum = 0, end = -1;
    vector<int> B;
    while(i < n)
    {
        //check if the element is non-negative
        if(A[i] > 0) {
            sum +=A[i];
            count++;      //number of elements in subarray for equivalent sum case
            end++;         
        }
        
        // check if the sum is greater than other subarray sum
        if(sum > maxsum) {
            maxsum = sum;
            fstart = start;         //end iterative loop starting and end points
            fend = end;
        }
        
        else if(sum == maxsum && count > maxl) {
            maxl = count;
        }
        
        //case of negative element
        if(A[i] < 0) {
            count  = 0;
            start = i+1;
            end = i;
            sum = 0;
        }
        
        i++;
    }
    
    
    if(fstart != -1 && fend != -1) {
        for(int j = fstart; j <= fend; j++)
        {
            B.push_back(A[j]);
        }
    }
    
    return B;
}
