//DAY 92/100
/*Combination Sum II
Asked in:  
Microsoft
Amazon
Infosys
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
Example :

Given candidate set 10,1,2,7,6,1,5 and target 8,

A solution set is:

[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6]
Combination Sum II
Asked in:  
Microsoft
Amazon
Infosys
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

 Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
Example :

Given candidate set 10,1,2,7,6,1,5 and target 8,

A solution set is:

[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6]

*/




void combination(vector<vector<int>> &res, vector<int> &temp, vector<int> &A, int B, int index, int sum) {
    if(sum==B) {
        res.push_back(temp);
        return;
    }
    
    if(sum>B) {
        return;    
    }
    
    for(int i=index; i<A.size(); i++) {
        sum+=A[i];
        temp.push_back(A[i]);
        combination(res, temp, A, B, i+1, sum);
        sum-=temp.back();
        temp.pop_back();
    }
    
    return;
}

vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    /*if(B==0) {
        return {{}};
    }*/
    
    vector<vector<int>> res;
    /*if(A.size()) {
        return res;
    }*/
    
    sort(A.begin(), A.end());
    vector<int> temp;
    
    combination(res, temp, A, B, 0, 0);
    
    sort(res.begin(), res.end());
    res.erase(unique(res.begin(), res.end()), res.end());
    return res;
}
