//DAY 59/100
/*

You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

    342 + 465 = 807
Make sure there are no trailing zeros in the output list
So, 7 -> 0 -> 8 -> 0 is not a valid response even though the value is still 807
*/





/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::addTwoNumbers(ListNode* A, ListNode* B) {

    if(A==NULL) {
        return B;
    }
    else if(B==NULL) {
        return A;
    }
    
    int sum=0, carry=0;

    //pre calculation because of (1) without the below calculations there will be an extra initial zero in the answer
    sum=A->val + B->val + carry;                
    A=A->next;
    B=B->next;
    carry=sum/10;
    
    ListNode *res = new ListNode(sum%10);       //to initialize the starting value of res node with sum's actual value instead of a 0
    ListNode *head = res;
    
    while(A || B || carry) {
        sum=(A? A->val: 0) + (B? B->val: 0) + carry;
        if(A) {
            A=A->next;
        }
        if(B) {
            B=B->next;
        }
        
        carry=sum/10;
        //res->val = sum;     //(2)
        
        ListNode *for_next= new ListNode(sum%10);       //same as intialising in (2)
        res->next=for_next;
        res=res->next;
    }
    
    
    
    return head;
}
